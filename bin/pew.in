#!/usr/bin/env -S guile \\
-e main -s
!#
(use-modules (cdr255 patchelf-wrapper) ; Reimplement anything used from here.
             (ice-9 getopt-long)       ; For CLI Options and Flags.
             (ice-9 ftw)               ; For Filesystem Access.
             (ice-9 textual-ports))    ; For Writing to Files.

;; This is where all of the flags for the program are defined.
(define option-spec
  '((version (single-char #\v) (value #f))
    (help (single-char #\h) (value #f))
    (interpreter (single-char #\i) (value #t))
    (rpath-specs (single-char #\r) (value #t))))

(define (main args)
  "Runs this script.

This is an ACTION.

Arguments
=========

ARGS <<list> of <strings>>: A list of all of the arguments given to this script,
with the script's name being argument 0.

Returns
=======

A <number> exit code representing the exit status of the program.

Impurities
==========

Accepts Input from User."  
  (let* ((options (getopt-long args option-spec))
         (version (option-ref options 'version #f))
         (help (option-ref options 'help #f))
         (interpreter (option-ref options 'interpreter "/lib/ld-linux-x86-64.so.2"))
         (rpath-specs (option-ref options 'rpath-specs "gcc:lib"))
         (arguments (option-ref options '() '())))
    (when help
      (display-help)
      (quit))
    (when version
      (display-version)
      (quit))
    (cond ((< (length arguments) 1)
           (display "Please specify the target binary file.\n\n")
                    (display-help)
                    (quit))
          ((not (= (length arguments) 1))
           (display (string-append
                     "Unrecognized input: "
                     arguments
                     "\n\n"))
           (display-help)
           (quit))
          ((not (file-exists? (car arguments)))
           (display (string-append
                     "File '"
                     (car arguments)
                     "' doesn't exist. Are You sure that's what You want to patch?\n\n"))
           (quit))
          (else
           (run-patchelf (car arguments)
                         #:interpreter interpreter
                         #:rpath-specs (process-rpath-specs rpath-specs))))))

(define (display-help)
  "Display Help Information.

This is an ACTION.

Arguments
=========

None.

Returns
=======

<undefined>

Impurities
==========

Displays to Screen and Ends Program.
"
  (display (string-append
            "Usage: pew [-hv]\n\n"
            
            "Explanation of Options:\n\n"
            
            "  -h   / --help      Display this help message.\n"
            "  -v   / --version   Display the version information.\n\n"
            
            "This program is a part of @PACKAGE_STRING@\n"
            "@LICENSE@"
            "Please report bugs to @PACKAGE_BUGREPORT@\n"
            "and see @PACKAGE_URL@\n"
            "for the latest version.\n\n"

            "This program is entirely written in GNU Guile Scheme\n"
            "and You are welcome to change it how You see fit.\n\n"

            "Guile Online Help: <https://www.gnu.org/software/guile/>\n"
            "Local Online Help: 'info guile'\n"))
  (quit))

(define (display-version)
  "Display Version Information.

This is an ACTION.

Arguments
=========

None.

Returns
=======

<undefined>

Impurities
==========

Prints to Screen and Ends Program.
"
  (display (string-append
            "@PACKAGE_STRING@"
            "\n"))
  (quit))

;; Local Variables:
;; mode: scheme
;; coding: utf-8
;; End:
